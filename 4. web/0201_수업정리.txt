https://splidejs.com/guides/getting-started/
~ splide 사용법 ~

댓글 작성
- 블로그 프로젝트에서는 목록 화면에서는 댓글을 보여주기만 하며, 댓글 작성은 글 내부에서만 가능했지만
- 피드 페이지에서는 댓글 달기 기능을 한 화면에서 각 post 마다 구현해야함

- 사용자의 입력을 받는 input을 직접 만들수도 있지만 Form 클래스를 사용하는 것이 Django의 기본 규칙

- 이전까지는 forms.Form 클래스를 사용했지만 ModelForm 클래스를 사용하면 DB테이블에 해당하는 모델 클래스와 연관된 기능들을 제공함


--- Django 모델에 있는 필드인 models.CharField()나 models.IntegerField()는 ModelForm에서 forms.CharField()나 forms.IntegerField()와 같은 Form에서 사용하는 Field로 자동 변환됨


- ModelForm 인스턴스에서 save()를 호출하면 전달받은 데이터를 사용해서 지정된 모델 인스턴스를 생성
--- 오류가 발생
--- 발생한 오류는 posts_comment 테이블의 post_id는 NULL을 허용하지 않는다는 메시지

--- 오류 해결 방법은 두 가지
----- 1. CommentForm으로 Comment 객체를 일단 만들되, 메모리상에 객체를 만들고 필요한 데이터를 나중에 채우기
----- 2. CommentForm에 NULL을 허용하지 않는 모든 필드를 선언하고, 인스턴스 생성 시 유효한 데이터를 전달


ModelForm에 모든 필드를 지정하면 별도의 작업 없이 save()만 호출하면 새 모델 인스턴스가 생성되므로 fields 리스트에 모든 필드를 지정하는게 맞다고 생각할 수 있음
- 하지만 Form에서 전달받는 데이터는 **사용자가 ㅇ비력한 데이터**임

Comment를 생성하기 위해 필요한 데이터는 3가지
1. 어떤 글의 댓글인지(Post)
2. 어떤 사용자의 댓글인지(User)
3. 어떤 내용을 가지고 있는지(Content)
- 여기서 사용자가 입력하는 데이터는 1번과 3번
- 어떤 사용자가 댓글을 생성했는지는 사용자가 입력한 데이터에 있으면 안되는 값이며, 시스템에서 자동으로 입력되어야 함

-> 그러므로 CommentForm은 post와 content만을 전달받은 값으로 지정해야하며, 작성자 정보인 user는 시스템에서 채워야함


댓글 작성 처리를 위한 view 구현
- 지금까지는 form을 사용한 POST 요청으로 받은 데이터를 같은 페이지에서 처리했음
- 많은 역할을 하나의 View에서 처리하게 되면 코드를 유지보수하기 어려워짐
- 댓글 작성 form에서 전송한 데이터는 별도의 댓글 작성 View에서 처리

View에 require_POST 데코레이터를 사용하면 오로지 POST 유형의 요청만 처리하며, 이 외의 유형의 요청에는 405 Method Not Allowed 응답을 돌려줌

## 주소창에 치는 것 = GET 방식

지금까지 form 태그에서 지정해본 속성값
- method : GET과 POST 중 어떤 방식으로 데이터를 전달할지 
- enctype : 기본값(=text data)과 파일 전송(multi- encoding data)을 위한 값 중 선택

- 이번에 사용할 속성값은 action
--- action : 이 form의 요청을 어디로 보낼지를 지정
----- 비어있는 경우에는 현재 브라우저의 URL을 사용

무슨 수업 했냐면은 :: 댓글수 표시, 댓글삭제, 글 작성 기본구조

** action 바로 밑에 

[작성 완료 후 원하는 Post위치로 이동]
- 글에 댓글을 추가한 후, 피드 페이지의 최상단이 아니라 댓글을 추가한 글로 돌아올 수 있도록 구현
--- HTML 요소의 id 속성을 활용할 수 있음

URL 뒤에 #{HTML 요소의 id} 를 입력하면, 그 id를 가진 요소의 위치로 이동하게 됨


[글의 댓글 수 표시]
- Post에 몇 개의 Comment가 연결되었는지 표시
- 연결된 객체의 정보가 전부 필요하지 않고 단순히 개수만 필요하다면 QureySet의 count 메서드를 사용하면 좋음


[댓글 삭제]
- 삭제할 댓글의 id정보를 받고, 받은 id에 해당하는 Comment 객체를 delete() 메서드로 삭제 
--- 댓글 삭제는 DB의 내용을 수정하는 명령으로, method가 POST일 때만 동작해야함


Comment를 작성한 소유자가 아니어도 적당한 Comment의 id값을 사용해서 comment_delete에 삭제 요청을 하면 댓글을 삭제할 수 있음
- View 함수에서 삭제 요청이 들어온 Comment의 작성자가 요청한 사용자와 일치하는지 먼저 확인해야함



[글 작성 기본구조 구현]
- View : post_add
- URL : 127.0.0.1:8000/posts/post_add/
- Template : templates/posts/post_add.html


------------------------------------------[문제]--------------------------------------------------------

[PostForm 클래스 구현]

Form 이름 : PostForm 
Post 모델 사용
content 입력받을 수 있게

데이터 전달 방식 = POST

post_add.html 에서 PostForm에 사용자에게 데이터를 입력 받을 수 있도록 개발



(posts > forms.py)
from posts.models import Comment, Post

class PostForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = [
            "content",
        ]

(posts > ulrs.py)
urlpatterns = [
    path("feeds/", views.feeds),
    path("comment_add/", views.comment_add),
    path("comment_delete/<int:comment_id>/", views.comment_delete),
    path("post_add/", views.post_add),   << 얘 추가
]

(posts > views.py)
from posts.forms import CommentForm, PostForm
def post_add(request):
    form = PostForm()
    context = {"form":form}
    return render(request, "posts/post_add.html",context)

(posts > post_add.html)
{% extends 'base.html' %}

{% block content %}
    <div id="post_add">
        <form method="POST">
            <h1>Post_add</h1>
            {% csrf_token %}a
            {{ form.as_p }}
        </form>
    </div>
{% endblock %}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
하고나서 http://127.0.0.1:8000/posts/post_add/ 확인하면 
Post_add


내용: 


이런 그림 완성
